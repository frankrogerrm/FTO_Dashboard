// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace ftodashboard.Shared
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Repos\FTO_Dashboard\ftodashboard\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Repos\FTO_Dashboard\ftodashboard\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Repos\FTO_Dashboard\ftodashboard\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Repos\FTO_Dashboard\ftodashboard\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Repos\FTO_Dashboard\ftodashboard\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Repos\FTO_Dashboard\ftodashboard\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Repos\FTO_Dashboard\ftodashboard\_Imports.razor"
using Microsoft.AspNetCore.Components.Web.Virtualization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Repos\FTO_Dashboard\ftodashboard\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Repos\FTO_Dashboard\ftodashboard\_Imports.razor"
using ftodashboard;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "C:\Repos\FTO_Dashboard\ftodashboard\_Imports.razor"
using ftodashboard.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 1 "C:\Repos\FTO_Dashboard\ftodashboard\Shared\NavMenu.razor"
using ftodashboard.Data;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Repos\FTO_Dashboard\ftodashboard\Shared\NavMenu.razor"
using ftodashboard.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Repos\FTO_Dashboard\ftodashboard\Shared\NavMenu.razor"
using ftodashboard.Services;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Repos\FTO_Dashboard\ftodashboard\Shared\NavMenu.razor"
using Microsoft.EntityFrameworkCore;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Repos\FTO_Dashboard\ftodashboard\Shared\NavMenu.razor"
using Telerik.Blazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "C:\Repos\FTO_Dashboard\ftodashboard\Shared\NavMenu.razor"
using Telerik.Blazor.Components;

#line default
#line hidden
#nullable disable
    public partial class NavMenu : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 208 "C:\Repos\FTO_Dashboard\ftodashboard\Shared\NavMenu.razor"
 

    #region Help
    bool activeFilters { get; set; } = false;

    public bool showFTOHelp { get; set; }
    [Parameter] public EventCallback<bool> showFTOHelpChanged { get; set; }

    private Task OnshowFTOHelpChanged(bool showHelp)
    {
        showFTOHelp = showHelp;

        return showFTOHelpChanged.InvokeAsync(showFTOHelp);
    }
    #endregion

    #region Filter Variables
    //Look Up Object List for filter id's
    List<Employee> EmployeesObjects;

    //Manager filter
    List<string> Managers;
    public string ManagerValue = "Managers";

    //Employee First/Last Name fitler variables
    List<string> Employees;
    public string EmployeeValue = "Employees";

    //Project # filter variables
    //List<ProjectList> Projects { get; set; }
    List<string> Projects { get; set; }
    List<string> ProjectValue { get; set; }
    //public List<ProjectList> ProjectValue { get; set; }
    //public string ProjectPlaceholder = "Projects";

    //Home Cost Center filter variables
    List<string> CostCenters;
    public string CostCenterValue = "Home Cost Centers";

    //Division filter variables
    List<string> Divisions;
    public string DivisionValue = "Business Units";

    //Group filter variables
    List<string> Groups;
    public string groupCB, GroupValue = "Groups";

    //Region filter variables
    List<string> Regions;
    public string regionCB, RegionValue = "Regions";

    //Type filter variables
    List<string> Types;
    public string typeCB, TypeValue = "Types";

    #endregion

    #region Parameter Variables

    [Parameter] public string monthYear { get; set; }

    [Parameter] public EventCallback<string> monthYearChanged { get; set; }

    [Parameter] public List<Employee> filteredFTO { get; set; }
    [Parameter] public EventCallback<List<Employee>> filteredFTOChanged { get; set; }

    #endregion

    //On page load
    protected override void OnInitialized()
    {
        showFTOHelp = false;    //By default help should not be visible

        //list of employee objects -> used as look up for filter lists
        EmployeesObjects = EmployeeService.GetEmployeeObjects();

        //load managers in filter
        Managers = EmployeeService.GetManagers();

        //load employees in filter
        Employees = EmployeeService.GetEmployees();

        //load projects in filter
        Projects = EmployeeService.GetProjectNumbers();
        //Projects = EmployeeService.GetEmployeeProjects();

        //load projects in filter
        CostCenters = EmployeeService.GetHomeCostCenters();

        //load divisions in filter
        Divisions = EmployeeService.GetDivisions();

        base.OnInitialized();

        groupCB = "display:none";
        regionCB = "display:none";
        typeCB = "display:none";
    }

    private Task clearFilters()
    {
        EmployeeValue = "Employees";
        CostCenterValue = "Home Cost Centers";
        DivisionValue = "Business Units";
        GroupValue = "Groups";
        RegionValue = "Regions";
        TypeValue = "Types";
        ManagerValue = "Managers";
        ProjectValue = new List<string>();

        groupCB = "display:none";
        regionCB = "display:none";
        typeCB = "display:none";

        activeFilters = false;

        filteredFTO.Clear();

        return filteredFTOChanged.InvokeAsync(filteredFTO);
    }

    private Task EmployeeSelected(object input)
    {
        string emp = (string)input;

        //if selection is empty, do nothing
        if (string.IsNullOrWhiteSpace(emp))
        {
            return null;
        }
        else
        {
            activeFilters = true;

            EmployeeValue = emp;
            CostCenterValue = "Home Cost Centers";
            DivisionValue = "Business Units";
            GroupValue = "Groups";
            RegionValue = "Regions";
            TypeValue = "Types";
            ManagerValue = "Managers";
            ProjectValue = new List<string>();

            groupCB = "display:none";
            regionCB = "display:none";
            typeCB = "display:none";

            //grab employee number and assign to parameter
            var employeeParameter = EmployeesObjects.FirstOrDefault(a => a.Name == emp).EmplNo;

            filteredFTO = EmployeeService.GetFilteredEmployees(employeeParameter).ToList();

            return filteredFTOChanged.InvokeAsync(filteredFTO);
        }
    }

    private Task ManagerSelected(object input)
    {
        string mgr = (string)input;

        //if selection is empty, do nothing
        if (string.IsNullOrWhiteSpace(mgr))
        {
            return null;
        }
        else
        {
            activeFilters = true;

            ManagerValue = mgr;
            EmployeeValue = "Employees";
            CostCenterValue = "Home Cost Centers";
            DivisionValue = "Business Units";
            GroupValue = "Groups";
            RegionValue = "Regions";
            TypeValue = "Types";
            ProjectValue = new List<string>();

            groupCB = "display:none";
            regionCB = "display:none";
            typeCB = "display:none";

            var managerParameter = EmployeesObjects.FirstOrDefault(a => a.Name == mgr).EmplNo;

            filteredFTO = EmployeeService.GetFilteredManagers(managerParameter).ToList();

            return filteredFTOChanged.InvokeAsync(filteredFTO);
        }
    }

    private Task ProjectSelected(object input)
    {
        List<string> proj = (List<string>)input;

        //if selection is empty, do nothing
        if (proj == null)
        {
            return null;
        }
        else
        {
            activeFilters = true;

            //ProjectPlaceholder = proj;
            EmployeeValue = "Employees";
            CostCenterValue = "Home Cost Centers";
            DivisionValue = "Business Units";
            GroupValue = "Groups";
            RegionValue = "Regions";
            TypeValue = "Types";
            ManagerValue = "Managers";

            groupCB = "display:none";
            regionCB = "display:none";
            typeCB = "display:none";

            //pass project code to filter employee object list
            filteredFTO = EmployeeService.GetFilteredProjects(proj).ToList();

            return filteredFTOChanged.InvokeAsync(filteredFTO);
        }
    }

    private Task CostCenterSelected(object input)
    {
        string cost = (string)input;

        //if selection is empty, do nothing
        if (string.IsNullOrWhiteSpace(cost))
        {
            return null;
        }
        else
        {
            activeFilters = true;

            EmployeeValue = "Employees";
            CostCenterValue = cost;
            DivisionValue = "Business Units";
            GroupValue = "Groups";
            RegionValue = "Regions";
            TypeValue = "Types";
            ManagerValue = "Managers";
            ProjectValue = new List<string>();

            groupCB = "display:none";
            regionCB = "display:none";
            typeCB = "display:none";

            cost = cost.Substring(0, 4);

            //pass project code to filter employee object list
            filteredFTO = EmployeeService.GetFilteredProjects(cost).ToList();

            return filteredFTOChanged.InvokeAsync(filteredFTO);
        }
    }

    private Task DivisionSelected(object input)
    {
        string div = (string)input;

        //if selection is empty, do nothing
        if (string.IsNullOrWhiteSpace(div))
        {
            return null;
        }
        else
        {
            activeFilters = true;

            EmployeeValue = "Employees";
            CostCenterValue = "Home Cost Centers";
            DivisionValue = div;
            GroupValue = "Groups";
            RegionValue = "Regions";
            TypeValue = "Types";
            ManagerValue = "Managers";
            ProjectValue = new List<string>();

            //populate regions based on chosen division
            Groups = EmployeeService.GetGroups(div);
            groupCB = "display:initial;";

            //grab div code from div desc and assign to parameter
            var divParameter = EmployeesObjects.FirstOrDefault(a => a.DivisionDesc == div).Division;

            //pass division code to filter employee object list
            filteredFTO = EmployeeService.GetFilteredDivision(divParameter).ToList();

            return filteredFTOChanged.InvokeAsync(filteredFTO);
        }

    }

    private Task GroupSelected(object input)
    {
        string grp = (string)input;

        //if selection is empty, do nothing
        if (string.IsNullOrWhiteSpace(grp))
        {
            return null;
        }
        else
        {
            activeFilters = true;

            EmployeeValue = "Employees";
            CostCenterValue = "Home Cost Centers";
            //DivisionValue = "Divisions";
            GroupValue = grp;
            RegionValue = "Regions";
            TypeValue = "Types";
            ManagerValue = "Managers";
            ProjectValue = new List<string>();

            //populate regions based on chosen division
            Regions = EmployeeService.GetRegions(grp);
            regionCB = "display:initial;";

            //grab group code from group desc and assign to parameter
            var grpParameter = EmployeesObjects.FirstOrDefault(a => a.GroupDesc == grp).Group;

            //pass division code to filter employee object list
            filteredFTO = EmployeeService.GetFilteredGroup(grpParameter).ToList();

            return filteredFTOChanged.InvokeAsync(filteredFTO);
        }

    }

    private Task RegionSelected(object input)
    {
        string reg = (string)input;

        //if selection is empty, do nothing
        if (string.IsNullOrWhiteSpace(reg))
        {
            return null;
        }
        else
        {
            activeFilters = true;

            EmployeeValue = "Employees";
            CostCenterValue = "Home Cost Centers";
            //DivisionValue = "Division";
            //GroupValue = "Groups";
            RegionValue = reg;
            TypeValue = "Types";
            ManagerValue = "Managers";

            //populate areas based on chosen division
            //Types = EmployeeService.GetTypes(reg);
            //typeCB = "display:initial;";

            ProjectValue = new List<string>();

            //grab region code from region desc and assign to parameter
            var regionParameter = EmployeesObjects.FirstOrDefault(a => a.RegionDesc == reg).Region;

            //pass division code to filter employee object list
            filteredFTO = EmployeeService.GetFilteredRegion(regionParameter).ToList();

            return filteredFTOChanged.InvokeAsync(filteredFTO);
        }

    }

    private Task TypeSelected(object input)
    {
        string type = (string)input;

        //if selection is empty, do nothing
        if (string.IsNullOrWhiteSpace(type))
        {
            return null;
        }
        else
        {
            activeFilters = true;

            EmployeeValue = "Employees";
            CostCenterValue = "Home Cost Centers";
            //DivisionValue = "Division";
            //GroupValue = "Groups";
            //RegionValue = "Regions";
            TypeValue = type;
            ManagerValue = "Managers";
            ProjectValue = new List<string>();

            //grab region code from region desc and assign to parameter
            var typeParameter = EmployeesObjects.FirstOrDefault(a => a.TypeDesc == type).Type;

            //pass division code to filter employee object list
            filteredFTO = EmployeeService.GetFilteredType(typeParameter).ToList();

            return filteredFTOChanged.InvokeAsync(filteredFTO);
        }

    }


#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager NavManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private EmployeeService EmployeeService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private CommonDataSourceContext CDS { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private Microsoft.ApplicationInsights.AspNetCore.JavaScriptSnippet JavaScriptSnippet { get; set; }
    }
}
#pragma warning restore 1591
