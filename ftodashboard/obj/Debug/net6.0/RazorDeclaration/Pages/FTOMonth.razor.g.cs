// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace ftodashboard.Pages
{
    #line default
    using global::System;
    using global::System.Collections.Generic;
    using global::System.Linq;
    using global::System.Threading.Tasks;
    using global::Microsoft.AspNetCore.Components;
#nullable restore
#line (1,2)-(1,23) "C:\Repos\FTO_Dashboard\ftodashboard\_Imports.razor"
using System.Net.Http

#nullable disable
    ;
#nullable restore
#line (2,2)-(2,42) "C:\Repos\FTO_Dashboard\ftodashboard\_Imports.razor"
using Microsoft.AspNetCore.Authorization

#nullable disable
    ;
#nullable restore
#line (3,2)-(3,45) "C:\Repos\FTO_Dashboard\ftodashboard\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms

#nullable disable
    ;
#nullable restore
#line (4,2)-(4,47) "C:\Repos\FTO_Dashboard\ftodashboard\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing

#nullable disable
    ;
#nullable restore
#line (5,2)-(5,53) "C:\Repos\FTO_Dashboard\ftodashboard\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization

#nullable disable
    ;
#nullable restore
#line (6,2)-(6,43) "C:\Repos\FTO_Dashboard\ftodashboard\_Imports.razor"
using Microsoft.AspNetCore.Components.Web

#nullable disable
    ;
#nullable restore
#line (7,2)-(7,58) "C:\Repos\FTO_Dashboard\ftodashboard\_Imports.razor"
using Microsoft.AspNetCore.Components.Web.Virtualization

#nullable disable
    ;
#nullable restore
#line (8,2)-(8,27) "C:\Repos\FTO_Dashboard\ftodashboard\_Imports.razor"
using Microsoft.JSInterop

#nullable disable
    ;
#nullable restore
#line (9,2)-(9,20) "C:\Repos\FTO_Dashboard\ftodashboard\_Imports.razor"
using ftodashboard

#nullable disable
    ;
#nullable restore
#line (10,2)-(10,27) "C:\Repos\FTO_Dashboard\ftodashboard\_Imports.razor"
using ftodashboard.Shared

#nullable disable
    ;
#nullable restore
#line (12,2)-(12,22) "C:\Repos\FTO_Dashboard\ftodashboard\_Imports.razor"
using Telerik.Blazor

#nullable disable
    ;
#nullable restore
#line (13,2)-(13,33) "C:\Repos\FTO_Dashboard\ftodashboard\_Imports.razor"
using Telerik.Blazor.Components

#nullable disable
    ;
#nullable restore
#line (2,2)-(2,27) "C:\Repos\FTO_Dashboard\ftodashboard\Pages\FTOMonth.razor"
using ftodashboard.Models

#nullable disable
    ;
#nullable restore
#line (3,2)-(3,29) "C:\Repos\FTO_Dashboard\ftodashboard\Pages\FTOMonth.razor"
using ftodashboard.Services

#nullable disable
    ;
#nullable restore
#line (4,2)-(4,38) "C:\Repos\FTO_Dashboard\ftodashboard\Pages\FTOMonth.razor"
using System.Collections.ObjectModel

#nullable disable
    ;
#nullable restore
#line (5,2)-(5,25) "C:\Repos\FTO_Dashboard\ftodashboard\Pages\FTOMonth.razor"
using System.Reflection

#nullable disable
    ;
    #line default
    #line hidden
    #nullable restore
    public partial class FTOMonth : global::Microsoft.AspNetCore.Components.ComponentBase
    #nullable disable
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(global::Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line (119,7)-(410,1) "C:\Repos\FTO_Dashboard\ftodashboard\Pages\FTOMonth.razor"

    #region Parameters

    //list of employee names and month/year as parameters
    [Parameter] public string monthYear { get; set; }

    [Parameter] public EventCallback<string> monthYearChanged { get; set; }

    [Parameter] public List<Employee> filteredFTO { get; set; }

    //compare past iterations of the same variable against the same
    List<Employee> filteredFTOv2;
    string monthYearv2;

    #endregion

    #region Variables
    //initial list to get all employee FTO for selected month
    public List<EmployeeFTO> empFTOList = new List<EmployeeFTO>();

    //list of employees from filter with FTO for currently selected month
    public List<EmployeeFTO> empFTOListforGrid = new List<EmployeeFTO>();

    List<string> MonthNames, MonthNums;
    public int days, month, year;
    public bool leapYear;
    public string monthName;

    public List<string> monthNumToNameList;

    public string monthValue;
    public EventCallback<string> monthValueChanged;

    //remove day columns for months under 31 days
    public bool day29 = true, day30 = true, day31 = true;

    //set calendar arrows functionality
    protected bool firstmonth { get; set; }
    protected bool lastmonth { get; set; }

    #endregion

    protected override void OnInitialized()
    {
        //TEST 
        var b = new Newtonsoft.Json.JsonSerializer();

        //populate month dropdown
        MonthNames = EmployeeService.GetMonthNames();
        MonthNums = EmployeeService.GetMonthNums();

        //determine forward/back month arrows
        firstmonth = false;
        lastmonth = false;

        //07 2021 format
        monthYear = MonthNums[0];

        //07 format
        month = Convert.ToInt32(monthYear.Substring(0, 2).Trim());

        monthNumToNameList = EmployeeService.GetMonthNumToString(month);
        monthName = monthNumToNameList[0];

        if (month < 10)
        {
            year = Convert.ToInt32(MonthNums[0].Substring(2, 4));
        }
        if (month >= 10)
        {
            year = Convert.ToInt32(MonthNums[0].Substring(3, 4));
        }

        monthValue = monthName + " " + year;

        DetermineDays(month);
    }

    //protected override void OnAfterRender(bool firstRender)
    //{
    //    if (!firstRender)
    //    {
    //        PopulateData();
    //    }
    //}

    protected override Task OnParametersSetAsync()
    {
        PopulateData();
        return base.OnParametersSetAsync();
    }

    async void PopulateData()
    {
        //AppInsights();

        //clear current list of employee FTO
        empFTOList.Clear();

        //default month year if query is on load and is the current month
        if (monthYear == null)
        {
            monthYear = month + " " + year;
        }

        //remove blanks to have the 82020 format
        monthYear = String.Concat(monthYear.Where(c => !Char.IsWhiteSpace(c)));

        //create a copy of filter list to compare against what's passing through - if the lists or months are the same don't run the query
        if ((filteredFTO != filteredFTOv2) || (monthYearv2 != monthYear))
        {
            //get latest employee FTO - if it has updated since last call
            empFTOList = EmployeeService.GetEmployeeFTO(monthYear);

            //only run if combo box selection has been picked
            if (filteredFTO != null)
            {
                empFTOListforGrid = EmployeeService.GetEmployeeFTOforGrid(empFTOList, filteredFTO);
            }

            //assign current list to new list to compare results in the future - if the same query dont run
            filteredFTOv2 = filteredFTO;
            monthYearv2 = monthYear;

            StateHasChanged();
            await Task.Delay(1000);
        }
        else if (filteredFTO != null)
        {
            if (filteredFTO.Count == 0)
            {
                empFTOListforGrid = null;

                StateHasChanged();
                await Task.Delay(1000);
            }
        }
    }

    public void DetermineDays(int month)
    {
        switch (month)
        {
            case 2:
                if (leapYear)
                {
                    days = 29;
                }
                else
                {
                    days = 28;
                }
                break;
            case 4:
                days = 30;
                break;
            case 6:
                days = 30;
                break;
            case 9:
                days = 30;
                break;
            case 11:
                days = 30;
                break;
            default:
                days = 31;
                break;
        }

        if (days == 28)
        {
            day29 = false;
            day30 = false;
            day31 = false;
        }
        else if (days == 29)
        {
            day30 = false;
            day31 = false;
        }
        else if (days == 30)
        {
            day31 = false;
        }
        else
        {
            day29 = true;
            day30 = true;
            day31 = true;
        }
    }

    private Task ChangeMonth(int monthIndex)
    {
        //month = Convert.ToInt32(monthYear.Substring(0, 2).Trim());

        month = month + monthIndex;

        if (month > 12)
        {
            month = 1;
            year = year + 1;
        }
        if (month < 1)
        {
            month = 12;
            year = year - 1;
        }
        monthNumToNameList = EmployeeService.GetMonthNumToString(month);
        monthName = monthNumToNameList[0];

        monthYear = month + " " + year;

        //FirstLastMonth(monthYear);

        DetermineDays(month);

        PopulateData();

        monthValue = monthName + " " + year;

        return monthValueChanged.InvokeAsync(monthValue);

    }

    private void FirstLastMonth(string monthYear)
    {
        if (monthYear == MonthNums[0])
        {
            firstmonth = true;
            lastmonth = false;
        }
        else if (monthYear == MonthNums[11])
        {
            firstmonth = false;
            lastmonth = true;
        }
        else
        {
            firstmonth = false;
            lastmonth = false;
        }
    }

    private Task MonthSelected(string selectedMonth)
    {
        //if selection is empty, do nothing
        if (string.IsNullOrWhiteSpace(selectedMonth))
        {
            return null;
        }
        else
        {
            var monthYearResult = EmployeeService.GetMonthNumFromString(selectedMonth);
            monthYear = monthYearResult[0];

            month = Convert.ToInt32(monthYear.Remove(monthYear.Length - 4));
            monthNumToNameList = EmployeeService.GetMonthNumToString(month);
            monthName = monthNumToNameList[0];

            if (month < 10)
            {
                year = Convert.ToInt32(monthYear.Substring(2, 4));
            }
            if (month >= 10)
            {
                year = Convert.ToInt32(monthYear.Substring(3, 4));
            }

            FirstLastMonth(monthYear);

            DetermineDays(month);

            PopulateData();

            monthValue = monthName + " " + year;

            return monthValueChanged.InvokeAsync(monthValue);
        }

    }

    void OnCellRenderHandler(GridCellRenderEventArgs args, int num)
    {
        EmployeeFTO item = (EmployeeFTO)args.Item;

        var propName = Convert.ToInt32(item.GetType().GetProperty("d" + num).GetValue(item));

        args.Class = 1 == propName ? "fto" : args.Class = 2 == propName ? "fto-part" : args.Class = 3 == propName ? "weekend" : args.Class = 4 == propName ? "holiday" : "ColourTransparent";
    }

#line default
#line hidden
#nullable disable

        [global::Microsoft.AspNetCore.Components.InjectAttribute] private 
#nullable restore
#line (8,9)-(8,19) "C:\Repos\FTO_Dashboard\ftodashboard\Pages\FTOMonth.razor"
IJSRuntime

#line default
#line hidden
#nullable disable
         
#nullable restore
#line (8,20)-(8,29) "C:\Repos\FTO_Dashboard\ftodashboard\Pages\FTOMonth.razor"
JsInterop

#line default
#line hidden
#nullable disable
         { get; set; }
         = default!;
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private 
#nullable restore
#line (7,9)-(7,24) "C:\Repos\FTO_Dashboard\ftodashboard\Pages\FTOMonth.razor"
EmployeeService

#line default
#line hidden
#nullable disable
         
#nullable restore
#line (7,25)-(7,40) "C:\Repos\FTO_Dashboard\ftodashboard\Pages\FTOMonth.razor"
EmployeeService

#line default
#line hidden
#nullable disable
         { get; set; }
         = default!;
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private 
#nullable restore
#line (6,9)-(6,26) "C:\Repos\FTO_Dashboard\ftodashboard\Pages\FTOMonth.razor"
NavigationManager

#line default
#line hidden
#nullable disable
         
#nullable restore
#line (6,27)-(6,44) "C:\Repos\FTO_Dashboard\ftodashboard\Pages\FTOMonth.razor"
NavigationManager

#line default
#line hidden
#nullable disable
         { get; set; }
         = default!;
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private 
#nullable restore
#line (14,9)-(14,67) "C:\Repos\FTO_Dashboard\ftodashboard\_Imports.razor"
Microsoft.ApplicationInsights.AspNetCore.JavaScriptSnippet

#line default
#line hidden
#nullable disable
         
#nullable restore
#line (14,68)-(14,85) "C:\Repos\FTO_Dashboard\ftodashboard\_Imports.razor"
JavaScriptSnippet

#line default
#line hidden
#nullable disable
         { get; set; }
         = default!;
    }
}
#pragma warning restore 1591
